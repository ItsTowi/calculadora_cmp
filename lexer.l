%{

#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include "parser.tab.h"
#include "funciones.h"

%}

%option yylineno
%option noyywrap
%option noinput
%option nounput
%x IN_COMMENT

lletra  [a-zA-Z]
digit   [0-9]
float [0-9]*\.[0-9]*([eE][-+]?[0-9]+)?
espacio [ \t\r]

%%

"repeat"                    { printf("TOKEN REPEAT\n"); return REPEAT; };
"do"                        { printf("TOKEN DO\n"); return DO; };
"done"                      { printf("TOKEN DONE\n"); return DONE; };


[a-zA-Z][a-zA-Z0-9]*        { 
                              yylval.expr_val.name = (char*)malloc(sizeof(char)*yyleng+1);
                              strncpy(yylval.expr_val.name, yytext, yyleng);

                              printf("Token ID: %s\n",yytext);
                              value_info aux;
                              if (sym_lookup(yytext, &aux) == SYMTAB_NOT_FOUND){
                                return ID;
                              } 
                              else 
                              { 
                                if (aux.val_type == BOOLEAN_TYPE) return B_ID;
                                else return A_ID;
                              }
                            
                            }

":="                        { 
                              return ASSIGN; 
                            }

","                         { return COMMA; }
"+"                         { printf("Token SUMA: %s\n",yytext); return ADD; }
"-"                         { return SUB; }
"*"                         { return MULT; }
"/"                         { return DIV; }
"%"                         { return MOD; }
"**"                        { return POW; }
"("                         { return LPAREN; }
")"                         { return RPAREN; }


{digit}({digit})*           {
                              yylval.expr_val.value.val_int = atoi(yytext);
                              yylval.expr_val.val_type = INT_TYPE;
                              yylval.expr_val.name = NULL;
                              printf("Token INTEGER: %d\n", yylval.expr_val.value.val_int);
                              return INTEGER;
                            }


{float}({float})*           {
                              yylval.expr_val.value.val_float = atof(yytext);
                              yylval.expr_val.val_type = FLOAT_TYPE;
                              printf("Token FLOAT: %s\n", yytext);
                              return FLOAT;
                            }

"\n"                        { 
                              return EOL;
                            }

{espacio}+                  {} /* eat up whitespaces */
.                           { fprintf(stderr, "Carácter inesperado: '%s' en línea %d\n", yytext, yylineno);}



"//".*"\n"                  { 
                              return ONELINECMNT; 
                            }



<INITIAL>{
"/*"            BEGIN(IN_COMMENT);
}
<IN_COMMENT>{
"*/"            BEGIN(INITIAL);
[^*\n]+                             /* eat comment in chunks */
"*"                                 /* eat the lone star */
\n    { return MULTILINECMNT;}
}


%%

